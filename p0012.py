"""
Problem 12: Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7
= 28. The first ten terms would be:
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred
divisors?
"""
import math
from decorator_time import *


def number_of_divisors(number):
    nod = 0
    sqr = int(math.sqrt(number))
    for j in range(1, sqr+1):
        if number % j == 0:
            nod += 2
    if sqr * sqr == number:
        nod -= 1
    return nod


@decorator_time
def first_triangle_with_divisors_overs(over):
    number = 0
    i = 1
    while number_of_divisors(number) < over:
        number += i
        i += 1
    return number


over = 500
print(first_triangle_with_divisors_overs(over))
